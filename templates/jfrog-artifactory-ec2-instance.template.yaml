AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploys the EC2 Autoscaling, LaunchConfig and Instance for Artifactory"
Parameters:
  PrivateSubnet1ID:
    Type: 'AWS::EC2::Subnet::Id'
  PrivateSubnet2ID:
    Type: 'AWS::EC2::Subnet::Id'
  MinScalingNodes:
    Type: Number
  MaxScalingNodes:
    Type: Number
  DeploymentTag:
    Type: String
  HostRole:
    Type: String
  AmiId:
    Type: String
  QSS3BucketName:
    Type: String
  QSS3KeyPrefix:
    Type: String
  ArtifactoryLicense1:
    Type: String
  ArtifactoryLicense2:
    Type: String
  ArtifactoryLicense3:
    Type: String
  ArtifactoryLicense4:
    Type: String
  ArtifactoryServerName:
    Type: String
  CertificateDomain:
    Type: String
  ArtifactoryIAMAcessKey:
    Type: String
    NoEcho: 'true'
  SecretAccessKey:
    Type: String
    NoEcho: 'true'
  ArtifactoryS3Bucket:
    Type: String
  Certificate:
    Type: String
  CertificateKey: 
    Type: String
    NoEcho: 'true'
  DBType:
    Type: String
  ArtifactoryDBEndpointAddress:
    Type: String
  DatabaseName:
    Type: String
  DatabaseUser:
    Type: String
  DatabasePassword:
    Type: String
    NoEcho: 'true'
  ArtifactoryPrimary:
    Type: String
  MasterKey:
    Type: String
    NoEcho: 'true'
  ExtraJavaOptions:
    Type: String
  ArtifactoryVersion:
    Type: String
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
  ArtifactoryELB:
    Type: String
  HostProfile:
    Type: String
  SecurityGroups:
    Type: String
  InstanceType:
    Type: String
  VolumeSize:
    Type: Number
  KeystorePassword:
    Description: Default Keystore from Java in which we upgrade.
    Type: String
    NoEcho: 'true'
  AnsibleVaultPass:
    Description: Ansiblevault Password to secure the artifactory.yml
    Type: String
    NoEcho: 'true'
# To populate additional mappings use the following with the desired --region
# aws --region us-west-2 ec2 describe-images --owners amazon --filters 'Name=name,Values=amzn-ami-hvm-2018.03.0.20181129-x86_64-gp2' 'Name=state,Values=available' --output json | jq -r '.Images | sort_by(.CreationDate) | last(.[]).ImageId'
Mappings:
  AWSAMIRegionMap:
    AMI:
      AMZNLINUXHVM: amzn-ami-hvm-2018.03.0.20181129-x86_64-gp2
    ap-northeast-1:
      AMZNLINUXHVM: ami-02ddf94e5edc8e904
    ap-northeast-2:
      AMZNLINUXHVM: ami-0ecd78c22823e02ef 
    ap-south-1:
      AMZNLINUXHVM: ami-05695932c5299858a
    ap-southeast-1:
      AMZNLINUXHVM: ami-043afc2b8b6cfba5c
    ap-southeast-2:
      AMZNLINUXHVM: ami-01393ce9a3ca55d67
    ca-central-1:
      AMZNLINUXHVM: ami-0fa94ecf2fef3420b
    eu-central-1:
      AMZNLINUXHVM: ami-0ba441bdd9e494102
    eu-west-1:
      AMZNLINUXHVM: ami-0e61341fa75fcaa18
    sa-east-1:
      AMZNLINUXHVM: ami-05b7dbc290217250d
    us-east-1:
      AMZNLINUXHVM: ami-0e2ff28bfb72a4e45
    us-east-2:
      AMZNLINUXHVM: ami-0998bf58313ab53da
    us-west-1:
      AMZNLINUXHVM: ami-021bb9f371690f97a
    us-west-2:
      AMZNLINUXHVM: ami-079f731edfe27c29c
  # Stubbed for future if Debian is wanted.
  #LinuxAMINameMap:
  #  Amazon-Linux-HVM:
  #    Code: AMZNLINUXHVM
Conditions:
  GovCloudCondition: !Equals 
    - !Ref 'AWS::Region'
    - us-gov-west-1
Resources:
  ArtifactoryScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref ArtifactoryLaunchConfiguration
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1ID
        - !Ref PrivateSubnet2ID
      MinSize: !Ref MinScalingNodes
      MaxSize: !Ref MaxScalingNodes
      Cooldown: '300'
      DesiredCapacity: !Ref MinScalingNodes
      LoadBalancerNames: 
        - !Ref ArtifactoryELB
      HealthCheckType: ELB
      HealthCheckGracePeriod: 600
      Tags:
        - Key: Name
          Value: !Ref DeploymentTag
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M
  ArtifactoryLaunchConfiguration:
      Type: 'AWS::AutoScaling::LaunchConfiguration'
      Metadata:
        'AWS::CloudFormation::Authentication':
          S3AccessCreds:
            type: S3
            roleName: 
              - !Ref HostRole #!Ref ArtifactoryHostRole
            buckets:
              - !Ref QSS3BucketName
        'AWS::CloudFormation::Init':
          configSets:
            artifactory_install:
              - "config-artifactory-master"
              - "secure-artifactory"
          config-artifactory-master:
            files:
              /root/.artifactory_ansible/artifactory.yml:
                content: !Sub |
                    # Base install for Artifactory
                    - import_playbook: site-artifactory.yml
                      vars:
                        artifactory_license1: ${ArtifactoryLicense1}
                        artifactory_license2: ${ArtifactoryLicense2}
                        artifactory_license3: ${ArtifactoryLicense3}
                        artifactory_license4: ${ArtifactoryLicense4}
                        artifactory_server_name: ${ArtifactoryServerName}
                        certificate_domain: ${CertificateDomain}
                        s3_endpoint: s3.${AWS::Region}.amazonaws.com
                        s3_access_key: ${ArtifactoryIAMAcessKey}
                        s3_access_secret_key: ${SecretAccessKey}
                        s3_bucket: ${ArtifactoryS3Bucket}
                        certificate: ${Certificate}
                        certificate_key: ${CertificateKey}
                        ssl_dir: /etc/pki/tls/certs/
                        db_type: ${DBType}
                        db_ipaddr: ${ArtifactoryDBEndpointAddress}
                        db_name: ${DatabaseName}
                        db_user: ${DatabaseUser}
                        db_password: ${DatabasePassword}
                        art_primary: ${ArtifactoryPrimary}
                        artifactory_keystore_pass: ${KeystorePassword}
                        master_key: ${MasterKey}
                        extra_java_opts: ${ExtraJavaOptions}
                        artifactory_version: ${ArtifactoryVersion}
                mode: "0400"
              /root/.vault_pass.txt:
                content: !Sub |
                  ${AnsibleVaultPass}
                mode: "0400"
              /root/.secureit.sh:
                content:
                  /usr/local/bin/ansible-vault encrypt /root/.artifactory_ansible/artifactory.yml --vault-id /root/.vault_pass.txt
                mode: "0770"
          secure-artifactory:
            commands:
              'secure ansible playbook':
                command: '/root/.secureit.sh'
                ignoreErrors: 'false'
      Properties:
        AssociatePublicIpAddress: false
        KeyName: !Ref KeyPairName
        IamInstanceProfile: !Ref HostProfile
        ImageId: !FindInMap 
          - AWSAMIRegionMap
          - !Ref 'AWS::Region'
          - !Ref AmiId
        SecurityGroups:
          - !Ref SecurityGroups
        InstanceType: !Ref InstanceType
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: !Ref VolumeSize
              VolumeType: gp2
              DeleteOnTermination: true
        UserData: !Base64 
          'Fn::Sub':
            - >
              #!/bin/bash -x

              #CFN Functions

              function cfn_fail

              {

              cfn-signal -e 1 --stack ${AWS::StackName} --region ${AWS::Region}
              --resource ArtifactoryScalingGroup

              exit 1

              }

              function cfn_success

              {

              cfn-signal -e 0 --stack ${AWS::StackName} --region ${AWS::Region}
              --resource ArtifactoryScalingGroup

              exit 0

              }

              S3URI=https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}

              yum install -y git

              echo $PATH

              PATH=/opt/aws/bin:$PATH

              echo $PATH
              echo \'[Cloning: Load QuickStart Common Utils]\'

              git clone
              https://github.com/aws-quickstart/quickstart-linux-utilities.git

              source /quickstart-linux-utilities/quickstart-cfn-tools.source

              echo \'[Loaded: Load QuickStart Common Utils]\'

              echo \'[Update Operating System]\'

              qs_update-os || qs_err

              qs_bootstrap_pip || qs_err

              qs_aws-cfn-bootstrap || qs_err

              pip install awscli &> /var/log/userdata.awscli_install.log || qs_err " awscli install failed "
              
              pip install ansible &> /var/log/userdata.ansible_install.log || qs_err " ansible install failed "

              mkdir ~/.artifactory_ansible

              aws s3 sync s3://${QSS3BucketName}/${QSS3KeyPrefix}scripts/ ~/.artifactory_ansible/ 

              cfn-init -v --stack ${AWS::StackName} --resource
              ArtifactoryLaunchConfiguration --configsets artifactory_install
              --region ${AWS::Region} || cfn_fail

              export ANSIBLE_VAULT_PASSWORD_FILE="/root/.vault_pass.txt"

              /usr/local/bin/ansible-playbook /root/.artifactory_ansible/artifactory.yml || qs_err " ansible execution failed "

              rm -rf /root/.secureit.sh

              [ $(qs_status) == 0 ] && cfn_success || cfn_fail
            - S3Region: !If 
              - GovCloudCondition
              - s3-us-gov-west-1
              - s3